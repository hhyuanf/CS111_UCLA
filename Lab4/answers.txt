# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Jingyuan Fan
Student ID: 904186250	
Email: stevenf@ucla.edu

# Partner 2 (if you're working in a team)
# Name: 
# Student ID: 
# Email: 

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)
I use fork to implement parallel, and allow download and upload process run at same time. I set up a MAXCONNPID parameter to limit the total number of child process

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)
Use strncpy instead of strcpy to prevent buff overflow, and also check the filename length when upload and download

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
Deny large file
I used 10MB as a threhold to prevent a peer keeping writing into socket to use up our disk space

Deny slow transmission
I calculate the transmission speed and deny peer that transmit data less than MIN_TRANSRATE

Popular Tracker
There are 249 fake peers in popular tracker so I increase the buffer size 

Only Allow Access to Current Directory
An attacking peer can request a file outside of our uploads directory by including a path to the filename. To prevent this, we check the requested file name and reject any upload requests if any '/' are found

Maximum Process number
I limit the maximum process number to 10 in order to prevent too many child processes consuming all the CPU resources

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)
Download
When the connection is set up, I first try to get a filename which is much larger than FILENAMESIZ, intending to overrun target's buffer. Then I try to get /etc/passwd, and if the peer does not limit the access, I will get the file. Then i try to start as many as connection as possible to get ../answers.txt, and if the target is using parallel and doesn’t have protection mechanism, it will use up all the CPU and memory resources. Here I set the limit to 3000 processes which is enough. Also I can keep sending a GET request without actually downloading, and this will also take yo peer’s system resources. Each kind of attack will be launched when evil_mode is set to different number. 
 
Upload
peers keep sending meaningless bytes without terminal byte to consume all disk

# Extra credit problems
#Extra credit problem:  yes
Yes. I implemented file integrity check using MD5 checksum.

# Add any other information you'd like us to know below this line.
Both good and bad servers are down, so I only test my code on slow servers, and didn’t have the chance to test the attack and prevention code. But it should work as expected.

